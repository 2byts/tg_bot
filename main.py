import logging
import re
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.utils import markdown as md
import aiohttp
import asyncio

# Bot token and admin user ID
BOT_TOKEN = '7397081271:AAHLW68BTMvrzIEBpvmtfk-jSEx9IN0l9ak'
ADMIN_ID = 6264097156

# Initialize bot and dispatcher
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
dp.bot = bot  # Set bot instance to Dispatcher

# Setup logging
logging.basicConfig(level=logging.INFO)

# Connect to the SQLite database
conn = sqlite3.connect('gmail_receiver_bot.db')
cursor = conn.cursor()

# Create tables if they don't exist
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    balance INTEGER DEFAULT 0
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS gmail_accounts (
    user_id INTEGER,
    gmail TEXT,
    password TEXT,
    approved INTEGER DEFAULT 0,
    FOREIGN KEY(user_id) REFERENCES users(user_id)
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS payments (
    payment_id TEXT PRIMARY KEY,
    user_id INTEGER,
    method TEXT,
    number TEXT,
    status TEXT DEFAULT 'pending',
    FOREIGN KEY(user_id) REFERENCES users(user_id)
)
''')

conn.commit()

# Define states
class Form(StatesGroup):
    waiting_for_gmail = State()
    waiting_for_password = State()
    waiting_for_payment_info = State()
    waiting_for_payment_method = State()

# Handle /start command
@dp.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await state.clear()

    cursor.execute('SELECT * FROM users WHERE user_id=?', (user_id,))
    user = cursor.fetchone()

    if user:
        cursor.execute('SELECT gmail, approved FROM gmail_accounts WHERE user_id=?', (user_id,))
        accounts = cursor.fetchall()
        response = md.text(
            "ЁЯСЛ ржЖржмрж╛рж░ рж╕рзНржмрж╛ржЧрждржо!\n\nЁЯУЬ **ржЖржкржирж╛рж░ ржЬржорж╛ ржжрзЗржУрзЯрж╛ Gmail ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯржЧрзБрж▓рзЛ:**\n",
            *(f"ЁЯУз {account[0]} - {'тЬЕ ржЕржирзБржорзЛржжрж┐ржд' if account[1] == 1 else 'тП│ ржЕржкрзЗржХрзНрж╖рж╛ржпрж╝'}\n" for account in accounts),
            f"\nЁЯТ░ **ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕:** {user[1]} TK"
        )
    else:
        cursor.execute('INSERT INTO users (user_id) VALUES (?)', (user_id,))
        conn.commit()
        response = "ЁЯСЛ рж╕рзНржмрж╛ржЧрждржо! рж╢рзБрж░рзБ ржХрж░рж╛рж░ ржЬржирзНржп ржЖржкржирж╛рж░ Gmail ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржЬржорж╛ ржжрж┐ржиред ЁЯУз"

    await message.answer(response)
    await state.set_state(Form.waiting_for_gmail)

# Handle Gmail submission
@dp.message(Form.waiting_for_gmail)
async def receive_gmail(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    gmail = message.text.strip()

    if not re.match(r'^[a-zA-Z0-9._%+-]+@gmail\.com$', gmail):
        await message.answer("тЭМ ржжржпрж╝рж╛ ржХрж░рзЗ ржПржХржЯрж┐ ржмрзИржз Gmail ржарж┐ржХрж╛ржирж╛ ржкрзНрж░ржжрж╛ржи ржХрж░рзБржиред ЁЯУз")
        return

    cursor.execute('SELECT * FROM gmail_accounts WHERE gmail=?', (gmail,))
    if cursor.fetchone():
        await message.answer("тЪая╕П ржПржЗ Gmail ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯржЯрж┐ ржЕржирзНржп ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржжрзНржмрж╛рж░рж╛ ржЗрждрзЛржоржзрзНржпрзЗ ржЬржорж╛ ржжрзЗржУржпрж╝рж╛ рж╣ржпрж╝рзЗржЫрзЗред ржжржпрж╝рж╛ ржХрж░рзЗ ржПржХржЯрж┐ ржнрж┐ржирзНржи ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржЬржорж╛ ржжрж┐ржиред ЁЯУз")
    else:
        await state.update_data(gmail=gmail)
        await message.answer("ЁЯФТ ржжржпрж╝рж╛ ржХрж░рзЗ ржПржЗ Gmail ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗрж░ ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб ржкрзНрж░ржжрж╛ржи ржХрж░рзБржи:")
        await state.set_state(Form.waiting_for_password)

# Handle password submission
@dp.message(Form.waiting_for_password)
async def get_gmail_password(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    password = message.text.strip()

    data = await state.get_data()
    gmail = data.get('gmail')

    cursor.execute('INSERT INTO gmail_accounts (user_id, gmail, password) VALUES (?, ?, ?)', (user_id, gmail, password))
    conn.commit()

    await bot.send_message(ADMIN_ID, f"тЪая╕П ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА {user_id} ржПржХржЯрж┐ Gmail ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржЕржирзБржорзЛржжржирзЗрж░ ржЬржирзНржп ржЬржорж╛ ржжрж┐ржпрж╝рзЗржЫрзЗ:\nЁЯУз {gmail}\nЁЯФТ ржкрж╛рж╕ржУржпрж╝рж╛рж░рзНржб: {password}")

    await message.answer("тЬЕ ржЖржкржирж╛рж░ Gmail ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржЬржорж╛ ржжрзЗржУржпрж╝рж╛ рж╣ржпрж╝рзЗржЫрзЗ ржПржмржВ ржЕржирзБржорзЛржжржирзЗрж░ ржЬржирзНржп ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░ржЫрзЗред тП│")
    await state.clear()

# Handle /review_accounts command
@dp.message(Command("review_accounts"))
async def review_accounts(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("тЭМ ржЖржкржирж┐ ржПржЗ ржХрж╛ржЬржЯрж┐ ржХрж░рждрзЗ ржЕржирзБржорзЛржжрж┐ржд ржиржиред")
        return

    cursor.execute('SELECT gmail FROM gmail_accounts WHERE approved=0')
    accounts = cursor.fetchall()

    if accounts:
        response = md.text(
            "ЁЯУЬ **ржЕржирзБржорзЛржжржирзЗрж░ ржЬржирзНржп ржЕржкрзЗржХрзНрж╖рж╛ржпрж╝ ржерж╛ржХрж╛ Gmail ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯржЧрзБрж▓рзЛ:**\n",
            *(f"ЁЯУз {account[0]} - /approve {account[0]} /reject {account[0]}\n" for account in accounts)
        )
    else:
        response = "тЬЕ ржХрзЛржи ржЕржкрзЗржХрзНрж╖рж╛ржпрж╝ ржерж╛ржХрж╛ Gmail ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржирзЗржЗред"

    await message.answer(response)

# Handle /approve command
@dp.message(Command("approve"))
async def approve_command(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("тЭМ ржЖржкржирж┐ ржПржЗ ржХрж╛ржЬржЯрж┐ ржХрж░рждрзЗ ржЕржирзБржорзЛржжрж┐ржд ржиржиред")
        return

    gmail = message.text.split(' ', 1)[1].strip()
    if not gmail:
        await message.answer("тЭМ ржПржХржЯрж┐ Gmail ржарж┐ржХрж╛ржирж╛ ржкрзНрж░ржжрж╛ржи ржХрж░рзБржиред")
        return

    cursor.execute('SELECT user_id FROM gmail_accounts WHERE gmail=? AND approved=0', (gmail,))
    result = cursor.fetchone()

    if result:
        user_id = result[0]
        cursor.execute('UPDATE gmail_accounts SET approved=1 WHERE gmail=?', (gmail,))
        cursor.execute('UPDATE users SET balance = balance + 5 WHERE user_id=?', (user_id,))
        conn.commit()

        await bot.send_message(user_id, f"тЬЕ ржЖржкржирж╛рж░ Gmail ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ {gmail} ржЕржирзБржорзЛржжрж┐ржд рж╣ржпрж╝рзЗржЫрзЗред ЁЯТ░ ржЖржкржирж┐ 5 TK ржкрзЗржпрж╝рзЗржЫрзЗржиред\n\nржЖржкржирж╛рж░ ржирждрзБржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {get_user_balance(user_id)} TK")
        await message.answer(f"тЬЕ {gmail} ржЕржирзБржорзЛржжрж┐ржд рж╣ржпрж╝рзЗржЫрзЗред")
    else:
        await message.answer("тЭМ Gmail ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯржЯрж┐ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ ржЕржержмрж╛ ржПржЯрж┐ ржЗрждрзЛржоржзрзНржпрзЗ ржЕржирзБржорзЛржжрж┐ржд рж╣ржпрж╝рзЗржЫрзЗред")

# Handle /reject command
@dp.message(Command("reject"))
async def reject_command(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("тЭМ ржЖржкржирж┐ ржПржЗ ржХрж╛ржЬржЯрж┐ ржХрж░рждрзЗ ржЕржирзБржорзЛржжрж┐ржд ржиржиред")
        return

    gmail = message.text.split(' ', 1)[1].strip()
    if not gmail:
        await message.answer("тЭМ ржПржХржЯрж┐ Gmail ржарж┐ржХрж╛ржирж╛ ржкрзНрж░ржжрж╛ржи ржХрж░рзБржиред")
        return

    cursor.execute('SELECT user_id FROM gmail_accounts WHERE gmail=? AND approved=0', (gmail,))
    result = cursor.fetchone()

    if result:
        user_id = result[0]
        cursor.execute('DELETE FROM gmail_accounts WHERE gmail=?', (gmail,))
        conn.commit()

        await bot.send_message(user_id, f"тЭМ ржЖржкржирж╛рж░ Gmail ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ {gmail} ржкрзНрж░рждрзНржпрж╛ржЦрзНржпрж╛ржд рж╣ржпрж╝рзЗржЫрзЗред")
        await message.answer(f"тЭМ {gmail} ржкрзНрж░рждрзНржпрж╛ржЦрзНржпрж╛ржд рж╣ржпрж╝рзЗржЫрзЗред")
    else:
        await message.answer("тЭМ Gmail ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯржЯрж┐ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ ржЕржержмрж╛ ржПржЯрж┐ ржЗрждрзЛржоржзрзНржпрзЗ ржЕржирзБржорзЛржжрж┐ржд рж╣ржпрж╝рзЗржЫрзЗред")

# Handle /wallet command
@dp.message(Command("wallet"))
async def wallet_command(message: types.Message):
    user_id = message.from_user.id
    balance = get_user_balance(user_id)

    if balance is not None:
        await message.answer(f"ЁЯТ╝ **ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи Wallet ржмрзНржпрж╛рж▓рзЗржирзНрж╕:** {balance} TK ЁЯТ╕")
    else:
        await message.answer("тЭМ ржЖржкржирж╛рж░ Wallet ржПржЦржиржУ ржирзЗржЗред ржжржпрж╝рж╛ ржХрж░рзЗ ржПржХржЯрж┐ Gmail ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржЬржорж╛ ржжрж┐ржиред ЁЯУз")

# Handle /payment command
@dp.message(Command("payment"))
async def payment_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    balance = get_user_balance(user_id)

    # Check if user has a pending payment
    cursor.execute('SELECT * FROM payments WHERE user_id=? AND status="pending"', (user_id,))
    pending_payment = cursor.fetchone()
    if pending_payment:
        await message.answer("тЪая╕П ржЖржкржирж╛рж░ ржПржХржЯрж┐ ржЕржкрзЗржХрзНрж╖рж╛ржпрж╝ ржерж╛ржХрж╛ ржЙрждрзНрждрзЛрж▓ржирзЗрж░ ржЕржирзБрж░рзЛржз рж░ржпрж╝рзЗржЫрзЗред ржПржЯрж┐ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ ржирж╛ рж╣ржУржпрж╝рж╛ ржкрж░рзНржпржирзНржд ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржиред")
        return

    if balance >= 50:
        await message.answer("ЁЯТ░ **ржЖржкржирж╛рж░ ржХрж╛ржЫрзЗ ржкрж░рзНржпрж╛ржкрзНржд ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржЖржЫрзЗ!**\n\nржжржпрж╝рж╛ ржХрж░рзЗ ржЖржкржирж╛рж░ ржкрзЗржорзЗржирзНржЯ ржкржжрзНржзрждрж┐ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:\n1. Bkash\n2. Nagad")
        await state.set_state(Form.waiting_for_payment_method)
    else:
        await message.answer("тЪая╕П **ржЕржкрж░рзНржпрж╛ржкрзНржд ржмрзНржпрж╛рж▓рзЗржирзНрж╕:** ржкрзЗржорзЗржирзНржЯрзЗрж░ ржЬржирзНржп ржЕржирзНрждржд рзлрзж TK ржкрзНрж░ржпрж╝рзЛржЬржиред ржЖрж░ржУ Gmail ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржЬржорж╛ ржжрж┐ржпрж╝рзЗ ржЖрж░ржУ ржЙржкрж╛рж░рзНржЬржи ржХрж░рзБржи! ЁЯТ╕")

# Handle payment method selection
@dp.message(Form.waiting_for_payment_method)
async def payment_method(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    method = message.text.strip().lower()

    if method not in ['bkash', 'nagad']:
        await message.answer("тЭМ ржЕржмрзИржз ржЕржкрж╢ржиред ржжржпрж╝рж╛ ржХрж░рзЗ 'Bkash' ржЕржержмрж╛ 'Nagad' ржЯрж╛ржЗржк ржХрж░рзБржиред")
        return

    await state.update_data(method=method)
    await message.answer(f"ЁЯФв ржжржпрж╝рж╛ ржХрж░рзЗ ржЖржкржирж╛рж░ {method.capitalize()} ржиржорзНржмрж░ ржжрж┐ржи:")
    await state.set_state(Form.waiting_for_payment_info)

# Handle payment info submission
@dp.message(Form.waiting_for_payment_info)
async def payment_info(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    number = message.text.strip()

    # Validate phone number
    if not re.match(r'^\d{11}$', number):
        await message.answer("тЭМ ржПржХржЯрж┐ ржмрзИржз рззрзз-рж╕ржВржЦрзНржпрж╛рж░ ржлрзЛржи ржиржорзНржмрж░ ржкрзНрж░ржжрж╛ржи ржХрж░рзБржиред")
        return

    data = await state.get_data()
    method = data.get('method')

    payment_id = f"{user_id}_{int(message.date.timestamp())}"
    cursor.execute('INSERT INTO payments (payment_id, user_id, method, number) VALUES (?, ?, ?, ?)', (payment_id, user_id, method, number))
    conn.commit()

    await bot.send_message(ADMIN_ID, f"тЪая╕П ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА {user_id} ржПржХржЯрж┐ ржкрзЗржорзЗржирзНржЯ ржЕржирзБрж░рзЛржз ржХрж░рзЗржЫрзЗ:\nржкрзЗржорзЗржирзНржЯ ржЖржЗржбрж┐: {payment_id}\nржкржжрзНржзрждрж┐: {method.capitalize()}\nржиржорзНржмрж░: {number}")
    await message.answer("тЬЕ ржЖржкржирж╛рж░ ржкрзЗржорзЗржирзНржЯ ржЕржирзБрж░рзЛржз ржЬржорж╛ рж╣ржпрж╝рзЗржЫрзЗ ржПржмржВ ржЕржирзБржорзЛржжржирзЗрж░ ржЬржирзНржп ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░ржЫрзЗред тП│")
    await state.clear()

# Handle /approve_payment command
@dp.message(Command("approve_payment"))
async def approve_payment(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("тЭМ ржЖржкржирж┐ ржПржЗ ржХрж╛ржЬржЯрж┐ ржХрж░рждрзЗ ржЕржирзБржорзЛржжрж┐ржд ржиржиред")
        return

    # Extract payment ID from command text
    command_parts = message.text.split(' ', 1)
    if len(command_parts) < 2:
        await message.answer("тЭМ ржжржпрж╝рж╛ ржХрж░рзЗ ржкрзЗржорзЗржирзНржЯ ржЖржЗржбрж┐ ржкрзНрж░ржжрж╛ржи ржХрж░рзБржиред")
        return

    payment_id = command_parts[1].strip()
    
    cursor.execute('SELECT user_id FROM payments WHERE payment_id=? AND status="pending"', (payment_id,))
    result = cursor.fetchone()

    if result:
        user_id = result[0]
        
        # Approve payment and update balance
        cursor.execute('UPDATE payments SET status="approved" WHERE payment_id=?', (payment_id,))
        cursor.execute('UPDATE users SET balance = balance - 5 WHERE user_id=?', (user_id,))
        conn.commit()

        await bot.send_message(user_id, f"тЬЕ ржЖржкржирж╛рж░ ржкрзЗржорзЗржирзНржЯ ржЕржирзБрж░рзЛржз (ржЖржЗржбрж┐: {payment_id}) ржЕржирзБржорзЛржжрж┐ржд рж╣ржпрж╝рзЗржЫрзЗред ЁЯТ╕ ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржХржорж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗред")
        await message.answer(f"тЬЕ ржкрзЗржорзЗржирзНржЯ ржЕржирзБрж░рзЛржз (ржЖржЗржбрж┐: {payment_id}) ржЕржирзБржорзЛржжрж┐ржд рж╣ржпрж╝рзЗржЫрзЗред")
    else:
        await message.answer("тЭМ ржкрзЗржорзЗржирзНржЯ ржЕржирзБрж░рзЛржз ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ ржЕржержмрж╛ ржПржЯрж┐ ржЗрждрзЛржоржзрзНржпрзЗ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")

# Handle /reject_payment command
@dp.message(Command("reject_payment"))
async def reject_payment(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("тЭМ ржЖржкржирж┐ ржПржЗ ржХрж╛ржЬржЯрж┐ ржХрж░рждрзЗ ржЕржирзБржорзЛржжрж┐ржд ржиржиред")
        return

    # Extract payment ID from command text
    command_parts = message.text.split(' ', 1)
    if len(command_parts) < 2:
        await message.answer("тЭМ ржжржпрж╝рж╛ ржХрж░рзЗ ржкрзЗржорзЗржирзНржЯ ржЖржЗржбрж┐ ржкрзНрж░ржжрж╛ржи ржХрж░рзБржиред")
        return

    payment_id = command_parts[1].strip()

    cursor.execute('SELECT user_id FROM payments WHERE payment_id=? AND status="pending"', (payment_id,))
    result = cursor.fetchone()

    if result:
        user_id = result[0]
        
        cursor.execute('UPDATE payments SET status="rejected" WHERE payment_id=?', (payment_id,))
        conn.commit()

        await bot.send_message(user_id, f"тЭМ ржЖржкржирж╛рж░ ржкрзЗржорзЗржирзНржЯ ржЕржирзБрж░рзЛржз (ржЖржЗржбрж┐: {payment_id}) ржкрзНрж░рждрзНржпрж╛ржЦрзНржпрж╛ржд рж╣ржпрж╝рзЗржЫрзЗред")
        await message.answer(f"тЭМ ржкрзЗржорзЗржирзНржЯ ржЕржирзБрж░рзЛржз (ржЖржЗржбрж┐: {payment_id}) ржкрзНрж░рждрзНржпрж╛ржЦрзНржпрж╛ржд рж╣ржпрж╝рзЗржЫрзЗред")
    else:
        await message.answer("тЭМ ржкрзЗржорзЗржирзНржЯ ржЕржирзБрж░рзЛржз ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ ржЕржержмрж╛ ржПржЯрж┐ ржЗрждрзЛржоржзрзНржпрзЗ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")
        
# Handle /restart command (admin only)
@dp.message(Command("restart"))
async def restart_command(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("тЭМ ржЖржкржирж┐ ржПржЗ ржХрж╛ржЬржЯрж┐ ржХрж░рждрзЗ ржЕржирзБржорзЛржжрж┐ржд ржиржиред")
        return

    await message.answer("ЁЯФД ржмржЯ ржкрзБржирж░рж╛ржпрж╝ ржЪрж╛рж▓рзБ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
    await bot.send_message(ADMIN_ID, "тЬЕ ржмржЯ ржкрзБржирж░рж╛ржпрж╝ ржЪрж╛рж▓рзБ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")
    await dp.storage.close()
    await bot.session.close()
    asyncio.get_event_loop().stop()

# Utility function to get user balance
def get_user_balance(user_id):
    cursor.execute('SELECT balance FROM users WHERE user_id=?', (user_id,))
    result = cursor.fetchone()
    return result[0] if result else None

if __name__ == '__main__':
    dp.run_polling(bot)
